{
  "openapi": "3.0.3",
  "info": {
    "title": "Login with OTP",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://localhost/api/v1"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "store",
      "description": "Operations about store"
    }
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "requestBody": {
          "description": "Login with user and password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/mfa/initiate": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Initiate user with mfa",
        "description": "",
        "operationId": "initiateUserMfa",
        "requestBody": {
          "description": "Initiate user validation with mfa",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInitiateMfaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInitiateMfaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/mfa/validate": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Validate user with mfa",
        "description": "",
        "operationId": "validateUserMfa",
        "requestBody": {
          "description": "Validate user with mfa",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateValidateMfaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateValidateMfaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/store": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Create store",
        "description": "Create a new store info",
        "operationId": "createStore",
        "requestBody": {
          "description": "Created store object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Store"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "store"
        ],
        "summary": "Update store",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateStore",
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Store"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/store/{username}": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Get store by user name",
        "description": "",
        "operationId": "getStoreByUsername",
        "requestBody": {
          "description": "Validate user with verification code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadStoreRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadStoreResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/store/{id}": {
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete store",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteStore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Store": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "name": {
            "type": "string",
            "example": "Generic Store"
          },
          "items": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          }
        },
        "xml": {
          "name": "store"
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Bugatti Chiron"
          },
          "description": {
            "type": "string",
            "example": "High performance car"
          }
        },
        "xml": {
          "name": "item"
        }
      },
      "CreateLoginRequest": {
        "type": "object",
        "properties": {
          "username": {
            "description": "The user name for login",
            "type": "string",
            "example": "sam1234"
          },
          "password": {
            "description": "The password for login in clear text",
            "type": "string",
            "example": 12345678
          }
        },
        "xml": {
          "name": "createloginrequest"
        }
      },
      "CreateLoginResponse": {
        "type": "object",
        "properties": {
          "mfaReferenceCode": {
            "description": "The reference code for user data to validate mfa",
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "xml": {
          "name": "createloginresponse"
        }
      },
      "CreateInitiateMfaRequest": {
        "type": "object",
        "properties": {
          "mfaReferenceCode": {
            "description": "The reference code for user data to validate mfa",
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "xml": {
          "name": "createloginrequest"
        }
      },
      "CreateInitiateMfaResponse": {
        "type": "object",
        "properties": {
          "receiver": {
            "description": "The reference code for user data to validate mfa",
            "type": "string",
            "example": "samu@example.com"
          },
          "seed": {
            "description": "The seed for otp code to validate mfa",
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "expirationTime": {
            "description": "The expiration time for otp code",
            "type": "number",
            "example": 300
          }
        },
        "xml": {
          "name": "CreateInitiateMfaResponse"
        }
      },
      "CreateValidateMfaRequest": {
        "type": "object",
        "properties": {
          "seed": {
            "description": "The seed for otp code to validate mfa",
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "value": {
            "description": "The expiration time for otp code",
            "type": "number",
            "example": 123456
          }
        },
        "xml": {
          "name": "createloginrequest"
        }
      },
      "CreateValidateMfaResponse": {
        "type": "object",
        "properties": {
          "verificationCode": {
            "description": "The verification code for intern validation",
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "xml": {
          "name": "CreateInitiateMfaResponse"
        }
      },
      "ReadStoreRequest": {
        "type": "object",
        "properties": {
          "verificationCode": {
            "description": "The verification code for intern validation",
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "xml": {
          "name": "ReadStoreRequest"
        }
      },
      "ReadStoreResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Store"
        },
        "xml": {
          "name": "ReadStoreResponse"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Pet": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "pet"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    }
  }
}